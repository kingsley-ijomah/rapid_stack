# frozen_string_literal: true

# User model class
class User
  include Mongoid::Document
  include Mongoid::Timestamps
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable,
         :jwt_authenticatable, jwt_revocation_strategy: JwtDenylist

  # Define roles
  ROLES = {
    <%- roleEnum %>
  }.freeze

  # Fields
<% 
// Find polymorphic fields
const polymorphicIdFields = fields.filter(field => field.is_polymorphic_id);
const polymorphicTypeFields = fields.filter(field => field.is_polymorphic_type);

// Process regular fields
fields.forEach(function(field) { 
  // Skip polymorphic fields as they'll be handled separately
  if (field.is_polymorphic_id || field.is_polymorphic_type) {
    return;
  }
  
  if (field.name.endsWith('_id')) { 
    // Skip fields ending with _id as they're managed by relationships
    return;
  } else if (field.name === 'email') { -%>  field :email, type: String, default: ''
<% } else if (field.name === 'encrypted_password') { -%>  field :encrypted_password, type: String, default: ''
<% } else if (field.name === 'reset_password_token' || field.name === 'reset_password_sent_at' || field.name === 'remember_created_at') { 
    // Skip these fields as they're already defined by devise
    return;
  } else if (field.name === 'role') { -%>  field :role, type: String, default: ROLES[:<%- field.default ? field.default : 'user' %>]
<% } else { -%>  field :<%= field.name %>, type: <%= field.type %><% if (field.default !== undefined) { %>, default: <%= field.default %><% } %>
<% } -%>
<% }); -%>

<% 
// Process polymorphic fields
if (polymorphicIdFields.length > 0 || polymorphicTypeFields.length > 0) { 
-%>
  # Polymorphic fields
<% 
  // Process polymorphic ID fields
  polymorphicIdFields.forEach(function(field) { 
-%>  field :<%= field.name %>, type: BSON::ObjectId<% if (field.required) { %>, required: <%= field.required %><% } %>
<% }); -%>
<% 
  // Process polymorphic Type fields
  polymorphicTypeFields.forEach(function(field) { 
-%>  field :<%= field.name %>, type: String<% if (field.required) { %>, required: <%= field.required %><% } %>
<% }); -%>
<% } -%>

<% if (relationships && relationships.length > 0) { -%>
  # Relationships
<% 
  // Group relationships by type for better organization
  const belongsTo = relationships.filter(rel => rel.type === 'belongs_to');
  const hasMany = relationships.filter(rel => rel.type === 'has_many');
  const hasOne = relationships.filter(rel => rel.type === 'has_one');
  const other = relationships.filter(rel => !['belongs_to', 'has_many', 'has_one'].includes(rel.type));
  
  // Create a Set to track relationship names and prevent duplicates
  const addedRelationships = new Set();
  
  // Output belongs_to relationships first
  belongsTo.forEach(function(rel) { 
    // Use the model snake_case name for proper naming
    const modelName = rel.modelSnakeCase || rel.model.toLowerCase();
    
    // Check if this relationship has already been added
    const relationshipKey = `${rel.type}:${modelName}`;
    if (addedRelationships.has(relationshipKey)) {
      return; // Skip duplicate relationship
    }
    addedRelationships.add(relationshipKey);
    
    if (rel.polymorphic) {
-%>  <%= rel.type %> :<%= modelName %>, polymorphic: true
<% } else { -%>  <%= rel.type %> :<%= modelName %><% if (rel.foreign_key) { %>, foreign_key: '<%= rel.foreign_key %>'<% } %>
<% } -%>
<% }); -%>
<% 
  // Output has_many relationships
  hasMany.forEach(function(rel) { 
    // Use the pluralized model name from the relationship
    const pluralizedName = rel.pluralizedModel || utils.pluralize(rel.modelSnakeCase || rel.model.toLowerCase());
    
    // Check if this relationship has already been added
    const relationshipKey = `${rel.type}:${pluralizedName}`;
    if (addedRelationships.has(relationshipKey)) {
      return; // Skip duplicate relationship
    }
    addedRelationships.add(relationshipKey);
    
    if (rel.polymorphic) {
-%>  <%= rel.type %> :<%= pluralizedName %>, as: :<%= rel.as %>
<% } else { -%>  <%= rel.type %> :<%= pluralizedName %><% if (rel.foreign_key) { %>, foreign_key: '<%= rel.foreign_key %>'<% } %><% if (rel.dependent) { %>, dependent: :<%= rel.dependent %><% } %>
<% } -%>
<% }); -%>
<% 
  // Output has_one relationships
  hasOne.forEach(function(rel) { 
    // Use the model snake_case name for proper naming
    const modelName = rel.modelSnakeCase || rel.model.toLowerCase();
    
    // Check if this relationship has already been added
    const relationshipKey = `${rel.type}:${modelName}`;
    if (addedRelationships.has(relationshipKey)) {
      return; // Skip duplicate relationship
    }
    addedRelationships.add(relationshipKey);
    
    if (rel.polymorphic) {
-%>  <%= rel.type %> :<%= modelName %>, as: :<%= rel.as %>
<% } else { -%>  <%= rel.type %> :<%= modelName %><% if (rel.foreign_key) { %>, foreign_key: '<%= rel.foreign_key %>'<% } %><% if (rel.dependent) { %>, dependent: :<%= rel.dependent %><% } %>
<% } -%>
<% }); -%>
<% 
  // Output other relationship types
  other.forEach(function(rel) { 
    if (rel.type.includes('many')) {
      // Use the pluralized model name from the relationship
      const pluralizedName = rel.pluralizedModel || utils.pluralize(rel.modelSnakeCase || rel.model.toLowerCase());
      
      // Check if this relationship has already been added
      const relationshipKey = `${rel.type}:${pluralizedName}`;
      if (addedRelationships.has(relationshipKey)) {
        return; // Skip duplicate relationship
      }
      addedRelationships.add(relationshipKey);
      
      if (rel.polymorphic) {
-%>  <%= rel.type %> :<%= pluralizedName %>, as: :<%= rel.as %>
<%    } else { -%>  <%= rel.type %> :<%= pluralizedName %><% if (rel.foreign_key) { %>, foreign_key: '<%= rel.foreign_key %>'<% } %><% if (rel.dependent) { %>, dependent: :<%= rel.dependent %><% } %>
<%    } -%>
<%  } else { 
      // Use the model snake_case name for proper naming
      const modelName = rel.modelSnakeCase || rel.model.toLowerCase();
      
      // Check if this relationship has already been added
      const relationshipKey = `${rel.type}:${modelName}`;
      if (addedRelationships.has(relationshipKey)) {
        return; // Skip duplicate relationship
      }
      addedRelationships.add(relationshipKey);
      
      if (rel.polymorphic) {
-%>  <%= rel.type %> :<%= modelName %>, as: :<%= rel.as %>
<%    } else { -%>  <%= rel.type %> :<%= modelName %><% if (rel.foreign_key) { %>, foreign_key: '<%= rel.foreign_key %>'<% } %><% if (rel.dependent) { %>, dependent: :<%= rel.dependent %><% } %>
<%    } -%>
<%  } -%>
<% }); -%>
<% } -%>

  # Validations
<% fields.forEach(function(field) { -%>
<% if (field.name.endsWith('_id') || field.name.endsWith('_type')) {
  // Skip relationship fields
  return;
} -%>
<% if (field.name === 'encrypted_password') {
  // Skip encrypted_password validations as they're handled by Devise
  return;
} -%>
<% if (field.validations) { -%>
<% if (field.validationStatements) { -%>
<% field.validationStatements.forEach(statement => { -%>  <%- statement %>
<% }); -%>
<% } -%>
<% } -%>
<% }); -%>

  # Additional User model validations
  validates :email, presence: true, uniqueness: true, format: { with: URI::MailTo::EMAIL_REGEXP }
  validates :password, presence: true, length: { minimum: 8 }, if: :password_required?
  validates :role, presence: true, inclusion: { in: ROLES.values }
  validate :password_format, on: %i[create update_password]

  # Callbacks
  before_save :set_role

  # Role helper methods
  ROLES.each do |role_name, role_value|
    define_method("#{role_name}?") { role == role_value }
    define_method("mark_as_#{role_name}!") do
      update!(role: role_value)
    end
  end

<% if (fields.some(field => field.name === 'first_name') && fields.some(field => field.name === 'last_name')) { -%>
  # Helper methods
  def full_name
    "#{first_name} #{last_name}"
  end
<% } -%>

  private

  def password_format
    return if password.blank?

    has_uppercase = password.match?(/[A-Z]/)
    has_lowercase = password.match?(/[a-z]/)
    has_digit = password.match?(/\d/)
    has_special_char = password.match?(/[^A-Za-z0-9]/)

    return if has_uppercase && has_lowercase && has_digit && has_special_char

    errors.add(:password, 'requires one uppercase letter, one lowercase letter, one digit, and one special character')
  end

  def set_role
    self.role = ROLES[:user] unless role
  end
end 