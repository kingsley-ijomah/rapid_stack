###############################################################################
#                               IMPORTANT NOTICE                                #
###############################################################################
#                                                                             #
# This file was generated by Terraform.                                       #
# Please do not edit this file directly.                                      #
# Instead, edit the vault_secret module in terraform code and re-run it       #
# to update this file.                                                        #
#                                                                             #
###############################################################################

name: 'Get Vault Secrets'
description: 'Retrieve secrets from HashiCorp Vault'

inputs:
  vault_addr:
    description: 'Vault server address'
    required: true
  droplet_ip:
    description: 'Droplet IP address'
    required: true
  ssh_private_key:
    description: 'SSH private key for server access'
    required: true

outputs:
%{ for output in outputs ~}
  ${output["name"]}:
    description: '${output["description"]}'
    value: $${{ steps.vault.outputs.${output["name"]} }}
%{ endfor ~}

runs:
  using: "composite"
  steps:
    - name: Generate Action Outputs
      id: vault
      shell: bash
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "$${{ inputs.ssh_private_key }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $${{ inputs.droplet_ip }} >> ~/.ssh/known_hosts

        # Get vault data using the vault CLI on the remote server via SSH.
        VAULT_DATA=$(ssh -i ~/.ssh/id_rsa deployuser@$${{ inputs.droplet_ip }} '
          ROOT_TOKEN=$(jq -r .root_token < /home/deployuser/.vault/vault_credentials.txt)
          VAULT_CONTAINER=$(docker ps -q -f name=vault)
          docker exec $VAULT_CONTAINER sh -c "VAULT_TOKEN=$ROOT_TOKEN vault kv get -format=json secret/config" | jq -r ".data.data"
        ')

        if echo "$VAULT_DATA" | jq -e '.' >/dev/null 2>&1; then
          # Validate JSON format
          echo "$VAULT_DATA" > /dev/null
        else
          echo "Error: Invalid JSON received" >&2
          echo "$VAULT_DATA" >&2
          exit 1
        fi

        # Clean up the SSH key
        rm -f ~/.ssh/id_rsa

        # Save the raw data for debugging
        echo "raw_vault_data<<EOF" >> "$GITHUB_OUTPUT"
        echo "$VAULT_DATA" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"

        # Export each key-value pair from the JSON.
        while IFS="=" read -r key value; do
          # Trim quotes from the value if present
          value=$(echo "$value" | tr -d '"')
          echo "$key=$value" >> "$GITHUB_OUTPUT"
        done < <(echo "$VAULT_DATA" | jq -r 'to_entries | .[] | "\(.key)=\(.value|tostring)"')



