<ion-header>
  <ion-toolbar>
    <ion-title><%= h.capitalize(h.pluralize(modelName)) %></ion-title>
  </ion-toolbar>
</ion-header>

<ion-content [fullscreen]="true">
  <ion-header collapse="condense">
    <ion-toolbar>
      <ion-title size="large"><%= h.capitalize(h.pluralize(modelName)) %></ion-title>
    </ion-toolbar>
  </ion-header>

  <ion-refresher slot="fixed" (ionRefresh)="doRefresh($event)">
    <ion-refresher-content></ion-refresher-content>
  </ion-refresher>

  <div class="ion-padding">
    <div class="list-container">
      <div class="filters-container">
        <ion-searchbar
          placeholder="Search <%= h.pluralize(modelName) %>"
          [(ngModel)]="searchTerm"
          (ionChange)="applyFilters()"
          class="search-bar">
        </ion-searchbar>
        
        <ion-button (click)="refresh()" fill="clear">
          <ion-icon slot="icon-only" name="refresh-outline"></ion-icon>
        </ion-button>
      </div>

      <div *ngIf="loading" class="ion-text-center ion-padding">
        <ion-spinner></ion-spinner>
        <p>Loading <%= h.pluralize(modelName) %>...</p>
      </div>

      <div class="cards-container" *ngIf="!loading && items.length > 0">
        <ion-card *ngFor="let item of items" class="item-card">
          <ion-card-content>
            <ion-grid>
              <ion-row *ngFor="let field of ['<%= selectedFields.map(field => h.toCamelCase(field)).join('\', \'') %>']">
                <ion-col size="4" class="field-label">
                  {{ getFieldLabel(field) }}
                </ion-col>
                <ion-col size="8" class="field-value">
                  {{ formatFieldValue(field, item[field]) }}
                </ion-col>
              </ion-row>
              <ion-row>
                <ion-col>
                  <ion-button expand="block" 
                    (click)="handleAction(item)"
                    [disabled]="hasExistingAction(item['id'])">
                    <% const buttonText = buttonName.toLowerCase().includes('express') ? 'Interested' : buttonName %>
                    <ion-badge *ngIf="hasExistingAction(item['id'])" color="success" class="action-badge">
                      <%= buttonText %>
                    </ion-badge>
                    <span *ngIf="!hasExistingAction(item['id'])">
                      <%= buttonName %>
                    </span>
                  </ion-button>
                </ion-col>
              </ion-row>
            </ion-grid>
          </ion-card-content>
        </ion-card>
      </div>

      <div *ngIf="!loading && items.length === 0" class="no-data">
        <p>No <%= h.pluralize(modelName) %> found</p>
      </div>

      <div class="pagination" *ngIf="!loading && pagination.totalPages > 1">
        <ion-button 
          [disabled]="!canGoPrevious" 
          (click)="previousPage()">
          Previous
        </ion-button>
        
        <span class="page-info">
          Page {{ pagination.currentPage }} of {{ pagination.totalPages }}
        </span>
        
        <ion-button 
          [disabled]="!canGoNext" 
          (click)="nextPage()">
          Next
        </ion-button>
      </div>
    </div>
  </div>

  <ion-infinite-scroll (ionInfinite)="loadMore($event)">
    <ion-infinite-scroll-content></ion-infinite-scroll-content>
  </ion-infinite-scroll>
</ion-content>

<!-- Action Modal -->
<ion-modal [isOpen]="isModalOpen" (didDismiss)="setOpen(false)">
  <ng-template>
    <ion-header>
      <ion-toolbar>
        <ion-title><%= buttonName %> Form</ion-title>
        <ion-buttons slot="end">
          <ion-button (click)="setOpen(false)">Close</ion-button>
        </ion-buttons>
      </ion-toolbar>
    </ion-header>

    <ion-content class="ion-padding">
      <form #actionForm="ngForm" (ngSubmit)="onSubmit(actionForm)">
        <!-- Regular Fields -->
        <ion-item *ngFor="let field of targetModelFields">
          <ion-label position="stacked">{{h.capitalize(field.name)}}</ion-label>
          <ion-input 
            [type]="getInputType(field.type)" 
            [(ngModel)]="formData[field.name]" 
            [name]="field.name"
            [required]="field.required">
          </ion-input>
        </ion-item>

        <!-- Relationship Fields -->
        <% targetModelRelationships.forEach(function(field) { %>
        <% if (!field.useCurrentUser) { %>
        <ion-item>
          <ion-label position="stacked"><%= h.capitalize(field.name) %></ion-label>
          <ion-select 
            [(ngModel)]="formData.<%= field.name %>Id" 
            name="<%= field.name %>Id"
            placeholder="Select <%= field.name %>">
            <ion-select-option *ngFor="let item of relationshipItems['<%= field.name %>']" [value]="item.value">
              {{ item.label }}
            </ion-select-option>
          </ion-select>
        </ion-item>
        <% } %>
        <% }); %>

        <ion-button expand="block" type="submit" class="ion-margin-top">
          <%= buttonName %>
        </ion-button>
      </form>
    </ion-content>
  </ng-template>
</ion-modal> 