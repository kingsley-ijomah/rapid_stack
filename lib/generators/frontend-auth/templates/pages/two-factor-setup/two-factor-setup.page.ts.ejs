import { Component, OnInit } from '@angular/core';
import { gql } from 'apollo-angular';
import { Router } from '@angular/router';
import { AuthService } from 'src/app/services/auth/auth.service';
import { IonInput, IonButton, IonCard, IonCardHeader, IonCardTitle, IonCardSubtitle, IonCardContent, IonProgressBar, IonIcon, ToastController } from '@ionic/angular/standalone';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { BaseGraphQLPage } from 'src/app/shared/base/base-graphql.page';
import { addIcons } from 'ionicons';
import { copyOutline, eyeOutline, eyeOffOutline } from 'ionicons/icons';
import { SetupTwoFactor } from 'src/app/graphql/mutations/auth/twoFactorSetup.mutation';

interface SetupTwoFactorResponse {
  data: {
    id: string;
    email: string;
  };
  qrCode: string;
  secretKey?: string;
}

@Component({
  selector: 'app-two-factor-setup',
  templateUrl: './two-factor-setup.page.html',
  styleUrls: ['./two-factor-setup.page.scss'],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    IonInput,
    IonButton,
    IonCard,
    IonCardHeader,
    IonCardTitle,
    IonCardSubtitle,
    IonCardContent,
    IonProgressBar,
    IonIcon
  ]
})
export class TwoFactorSetupPage extends BaseGraphQLPage implements OnInit {
  qrCode: string = '';
  secretKey: string = '';
  verificationCode: string = '';
  backupCodes: string[] = [];
  step: 'setup' | 'verify' | 'backup' = 'setup';
  loading = false;
  error: string | null = null;
  showSecret = false;
  showQRCode = false;

  constructor(
    private router: Router,
    private authService: AuthService,
    private toastController: ToastController
  ) {
    super();
    addIcons({ copyOutline, eyeOutline, eyeOffOutline });
  }

  ngOnInit() {
    // Check if user is authenticated
    if (!this.authService.isAuthenticated()) {
      this.router.navigate(['/auth']);
      return;
    }
    this.setupTwoFactor();
  }

  setupTwoFactor() {
    this.loading = true;
    this.error = null;
    
    this.authService.getCurrentUser().subscribe({
      next: (user) => {
        if (!user?.id) {
          this.error = 'User not found. Please try logging in again.';
          this.loading = false;
          return;
        }

        const variables = {
          input: {
            userId: user.id
          }
        };

        this.executeMutation({
          mutation: SetupTwoFactor,
          variables: variables,
          responsePath: 'setupTwoFactor',
          successMessage: 'Two-factor authentication setup successful',
          errorMessage: 'Failed to setup two-factor authentication. Please try again.',
          onSuccess: (result: SetupTwoFactorResponse) => {
            if (result.qrCode) {
              try {
                const base64Data = btoa(unescape(encodeURIComponent(result.qrCode)));
                this.qrCode = base64Data;
                
                if (result.secretKey) {
                  this.secretKey = result.secretKey;
                } else {
                  this.error = 'No secret key received in response';
                  this.loading = false;
                  return;
                }
                
                this.loading = false;
              } catch (error) {
                this.error = 'Invalid QR code format received. Please try again.';
                this.loading = false;
              }
            } else {
              this.error = 'Invalid response from server. Please try again.';
              this.loading = false;
            }
          },
          onError: (error) => {
            this.error = 'Failed to setup two-factor authentication. Please try again.';
            this.loading = false;
          }
        });
      },
      error: (error) => {
        this.error = 'Failed to get user information. Please try logging in again.';
        this.loading = false;
      }
    });
  }

  private async showToast(message: string, color: string = 'primary', icon: string = 'information-circle-outline') {
    const toast = await this.toastController.create({
      message,
      duration: 3000,
      position: 'top',
      color,
      icon
    });
    await toast.present();
  }

  copySecretKey() {
    navigator.clipboard.writeText(this.secretKey).catch(err => {
      console.error('Failed to copy secret key:', err);
    });
  }

  completeSetup() {
    this.router.navigate(['/auth/verify-2fa']);
  }

  handleImageError(event: Event) {
    console.error('Error loading QR code image:', event);
    this.error = 'Failed to load QR code. Please try again.';
    this.loading = false;
  }
} 