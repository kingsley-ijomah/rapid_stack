module Queries
  module <%= pascalCaseName %>Queries
    class <%= pascalCaseName %> < Queries::BaseQuery
      type Types::<%= pascalCaseName %>ResponseType, null: false
      argument :input, GraphQL::Types::JSON, required: false

      def resolve(input:)
        result = ExternalApi::<%= pascalCaseName %>Service.<%= camelCaseName %>(input)

        # Handle the response based on its structure
        if result["<%= resultsKey %>"]
          {
            data: [ {
              <% responseKeys.forEach(function(key, index) { %>
              <%= toCamelCase(key.key) %>: result["<%= resultsKey %>"]["<%= key.key %>"]<%= key.type === 'String' ? '.to_s' : '' %><%= index < responseKeys.length - 1 ? ',' : '' -%>
              <% }); %>
            } ],
            message: "<%= pascalCaseName %> fetched successfully",
            errors: [],
            http_status: 200
          }
        else
          {
            data: [],
            message: "<%= pascalCaseName %> fetch failed",
            errors: [ "Invalid response format from API" ],
            http_status: 500
          }
        end
      rescue StandardError => e
        {
          data: [],
          message: "<%= pascalCaseName %> fetch failed",
          errors: [ e.message ],
          http_status: 500
        }
      end
    end
  end
end
