module Queries
  module <%= pascalCaseName %>Queries
    class <%= pascalCaseName %> < Queries::BaseQuery
      type Types::<%= pascalCaseName %>ResponseType, null: false
<% if (hasArguments) { -%>
      argument :query, String, required: true
<% } -%>

<% if (hasArguments) { -%>
      def resolve(query:)
<% } else { -%>
      def resolve
<% } -%>
        # Implementation goes here
        result = ExternalApi::<%= pascalCaseName %>Service.<%= camelCaseName %>(query)
        {
          data: result["results"].map do |movie_data|
            {
              id: movie_data["id"],
            }
          end,
          message: "<%= pascalCaseName %> fetched successfully",
          errors: [],
          http_status: 200
        }
      rescue StandardError => e
        {
          data: [],
          message: "<%= pascalCaseName %> fetch failed",
          errors: [ e.message ],
          http_status: 500
        }
      end
    end
  end
end
