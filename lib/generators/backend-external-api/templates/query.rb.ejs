module Queries
  module <%= pascalCaseName %>Queries
    class <%= pascalCaseName %> < Queries::BaseQuery
      type Types::<%= pascalCaseName %>ResponseType, null: false
      argument :query, String, required: false

      def resolve(query: nil)
        result = ExternalApi::<%= pascalCaseName %>Service.<%= camelCaseName %>(query)
        {
          data: result["<%= resultsKey %>"].map do |item|
            {
              <% responseKeys.forEach(function(key, index) { %>
              <%= toCamelCase(key.key) %>: item["<%= key.key -%>"]<%= index < responseKeys.length - 1 ? ',' : '' -%>
              <% }); %>
            }
          end,
          message: "<%= pascalCaseName %> fetched successfully",
          errors: [],
          http_status: 200
        }
      rescue StandardError => e
        {
          data: [],
          message: "<%= pascalCaseName %> fetch failed",
          errors: [ e.message ],
          http_status: 500
        }
      end
    end
  end
end
