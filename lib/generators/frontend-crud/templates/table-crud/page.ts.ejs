import { Component, OnInit, ViewChild } from '@angular/core';
import { IonicModule, AlertController, IonModal } from '@ionic/angular';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';
import { addIcons } from 'ionicons';
import { add, createOutline, trashOutline, arrowUp, arrowDown, searchOutline, documentsOutline } from 'ionicons/icons';
import { GenericFormModalComponent } from 'src/app/shared/components/generic-form-modal/generic-form-modal.component';
import { BaseGraphQLPage } from 'src/app/shared/base/base-graphql.page';
import { Apollo } from 'apollo-angular';
import { BehaviorSubject, Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { List<%= h.capitalize(modelName) %><%= h.pluralize(modelName).slice(modelName.length) %>Query } from 'src/app/graphql/queries/<%= modelName.toLowerCase() %>/list<%= h.capitalize(modelName) %><%= h.pluralize(modelName).slice(modelName.length) %>.query';
import { Show<%= h.capitalize(modelName) %>Query } from 'src/app/graphql/queries/<%= modelName.toLowerCase() %>/show<%= h.capitalize(modelName) %>.query';
<% if (relationships && relationships.length > 0) { 
  relationships.forEach(function(rel) { %>
import { List<%= h.capitalize(rel.name) %><%= h.pluralize(rel.name).slice(rel.name.length) %>Query } from 'src/app/graphql/queries/<%= rel.name.toLowerCase() %>/list<%= h.capitalize(rel.name) %><%= h.pluralize(rel.name).slice(rel.name.length) %>.query';
<% }); } %>
import { Create<%= h.capitalize(modelName) %>Mutation } from 'src/app/graphql/mutations/<%= modelName.toLowerCase() %>/create<%= h.capitalize(modelName) %>.mutation';
import { Update<%= h.capitalize(modelName) %>Mutation } from 'src/app/graphql/mutations/<%= modelName.toLowerCase() %>/update<%= h.capitalize(modelName) %>.mutation';
import { Delete<%= h.capitalize(modelName) %>Mutation } from 'src/app/graphql/mutations/<%= modelName.toLowerCase() %>/delete<%= h.capitalize(modelName) %>.mutation';

interface TableColumn {
  field: string;
  header: string;
  sortable?: boolean;
}

interface TableItem {
<% fieldsWithTypes.forEach(function(field) { 
  let tsType;
  switch(field.type) {
    case 'String':
      tsType = 'string';
      break;
    case 'Integer':
    case 'Float':
      tsType = 'number';
      break;
    case 'Boolean':
      tsType = 'boolean';
      break;
    case 'Time':
    case 'Date':
    case 'DateTime':
      tsType = 'Date | string';
      break;
    case 'Array':
      tsType = 'any[]';
      break;
    case 'Hash':
    case 'Object':
      tsType = 'Record<string, any>';
      break;
    case 'Enum':
      tsType = 'string';
      break;
    default:
      tsType = 'any';
  }
%>
  <%= h.toCamelCase(field.name) %>?: <%= tsType %> | null;
<% }); %>
}

interface PaginationOptions {
  totalPages: number;
  totalCount: number;
  currentPage: number;
  perPage: number;
  prevPage: number | null;
  nextPage: number | null;
}

interface ListResponse {
  data: TableItem[];
  message: string;
  errors: string[];
  httpStatus: number;
  options: PaginationOptions;
}

interface MutationResponse {
  data: TableItem | null;
  errors: string[] | null;
  message: string;
  httpStatus: number;
}

interface QueryResponse {
  list<%= h.capitalize(modelName) %><%= h.pluralize(modelName).slice(modelName.length) %>: ListResponse;
}

@Component({
  selector: 'app-<%= selectedPage %>',
  templateUrl: './<%= selectedPage %>.page.html',
  styleUrls: ['./<%= selectedPage %>.page.scss'],
  standalone: true,
  imports: [IonicModule, CommonModule, GenericFormModalComponent, FormsModule, ReactiveFormsModule]
})
export class <%= h.capitalize(selectedPage) %>Page extends BaseGraphQLPage implements OnInit {
  @ViewChild('formModal') formModal!: IonModal;
  
  items: TableItem[] = [];
  loading = false;
  filters: Record<string, any> = {};
  pagination = {
    currentPage: 1,
    perPage: 10,
    totalPages: 0,
    totalCount: 0
  };

  sortField = '<%- h.toCamelCase(defaultSortField) %>';
  sortDirection: 'asc' | 'desc' = 'asc';

  columns: TableColumn[] = [
<% fields.forEach(function(field) { %>
    { field: '<%- h.toCamelCase(field) %>', header: '<%- h.capitalize(field.replace(/_/g, " ")) %>', sortable: true },
<% }); %>
  ];

  // Common properties
  backendErrors: string[] = [];

  // Form properties and methods
  form!: FormGroup;
  isEditing = false;
  currentItem: any = null;

<% if (relationships && relationships.length > 0) { 
  relationships.forEach(function(rel) { %>
  <%= rel.name.toLowerCase() %>s: any[] = [];
<% }); } %>

  constructor(
    private fb: FormBuilder,
    private alertController: AlertController,
    private apollo: Apollo
  ) {
    super();
    addIcons({ add, createOutline, trashOutline, arrowUp, arrowDown, searchOutline, documentsOutline });
    
    this.initForm();
<% if (relationships && relationships.length > 0) { 
  relationships.forEach(function(rel) { %>
    this.fetch<%= h.capitalize(rel.name) %>s();
<% }); } %>
  }

<% if (relationships && relationships.length > 0) { 
  relationships.forEach(function(rel) { %>
  private fetch<%= h.capitalize(rel.name) %>s() {
    this.executeQuery<any>({
      query: List<%= h.capitalize(rel.name) %><%= h.pluralize(rel.name).slice(rel.name.length) %>Query,
      variables: {
        page: 1,
        perPage: 100
      },
      responsePath: 'list<%= h.capitalize(rel.name) %><%= h.pluralize(rel.name).slice(rel.name.length) %>',
      onSuccess: (response) => {
        this.<%= rel.name.toLowerCase() %>s = response.data || [];
      }
    });
  }
<% }); } %>

  ngOnInit() {
    this.fetchItems();
  }

  private initForm(item?: any) {
    this.form = this.fb.group({
<% fieldsWithTypes.forEach(function(field) { 
  if (!['id', 'created_at', 'updated_at'].includes(field.name)) {
    let defaultValue = '';
    if (field.type === 'String' && field.name === 'status') {
      defaultValue = " || 'available'";
    } else if (field.type === 'Integer' || field.type === 'Float') {
      defaultValue = ' || 0';
    }
%>
      <%- h.toCamelCase(field.name) %>: [item?.<%- h.toCamelCase(field.name) %><%- defaultValue %>, [Validators.required]],
<% } }); %>
<% if (relationships && relationships.length > 0) { 
  relationships.forEach(function(rel) { 
    // Convert relationshipId to relationship?.id pattern
    const relationshipName = h.toCamelCase(rel.name);
    const relationshipIdName = h.toCamelCase(rel.name + 'Id');
%>
      <%- relationshipIdName %>: [item?.<%- relationshipName %>?.id || item?.<%- relationshipIdName %>, [Validators.required]],
<% }); } %>
    });
  }

  async openFormModal(item?: any) {
    this.isEditing = !!item;
    if (this.isEditing) {
      try {
        const result = await this.executeQuery<any>({
          query: Show<%= h.capitalize(modelName) %>Query,
          variables: { id: item.id },
          responsePath: 'show<%= h.capitalize(modelName) %>',
          onSuccess: (response) => {
            if (response?.data) {
              this.currentItem = response.data;
              this.initForm(response.data);
            }
          },
          onError: (error) => {
            console.error('Error fetching item details:', error);
            this.backendErrors = this.errorService.errors;
          }
        });
      } catch (error) {
        console.error('Error in openFormModal:', error);
      }
    } else {
      this.currentItem = null;
      this.initForm();
    }
    await this.formModal.present();
  }

  async onSubmit() {
    if (this.form.valid) {
      const formData = this.form.value;
      
      if (this.isEditing) {
        await this.updateItem({
          ...this.currentItem,
          ...formData
        });
      } else {
        await this.createItem(formData);
      }
      
      this.formModal.dismiss();
      this.form.reset();
      this.isEditing = false;
      this.currentItem = null;
    }
  }

  private async fetchItems() {
    this.loading = true;
    try {
      this.apollo.watchQuery<QueryResponse>({
        query: List<%= h.capitalize(modelName) %><%= h.pluralize(modelName).slice(modelName.length) %>Query,
        variables: {
          page: this.pagination.currentPage,
          perPage: this.pagination.perPage,
          orderDirection: this.sortDirection,
          filters: this.filters
        }
      }).valueChanges.subscribe(({ data, loading }) => {
        this.loading = loading;
        if (data) {
          const response = data.list<%= h.capitalize(modelName) %><%= h.pluralize(modelName).slice(modelName.length) %>;
          this.items = this.sortItems(response.data);
          this.pagination = {
            currentPage: response.options.currentPage,
            perPage: response.options.perPage,
            totalPages: response.options.totalPages,
            totalCount: response.options.totalCount
          };
        }
      });
    } catch (error) {
      console.error('Error fetching records:', error);
    } finally {
      this.loading = false;
    }
  }

  private async createItem(data: any) {
    try {
      // Convert form data to match backend expectations
      const formattedData = {
<% fieldsWithTypes.forEach(function(field) { 
  if (!['id', 'created_at', 'updated_at'].includes(field.name)) {
%>
        <%- h.toCamelCase(field.name) %>: data.<%- h.toCamelCase(field.name) %>,
<% }
}); %>
<% if (relationships && relationships.length > 0) { 
  relationships.forEach(function(rel) { 
    const relationshipName = h.toCamelCase(rel.name);
    const relationshipIdName = h.toCamelCase(rel.name + 'Id');
%>
        <%- relationshipIdName %>: data.<%- relationshipName %>?.id || data.<%- relationshipIdName %>,
<% }); } %>
      };

      const result = await this.executeMutation<MutationResponse>({
        mutation: Create<%= h.capitalize(modelName) %>Mutation,
        variables: { input: formattedData },
        responsePath: 'create<%= h.capitalize(modelName) %>',
        successMessage: 'Record created successfully!',
        errorMessage: 'Creation failed. Please check the errors and try again.',
        onSuccess: (response) => {
          if (response?.data) {
            this.sortField = '<%- h.toCamelCase(defaultSortField) %>';
            this.sortDirection = 'desc';
            this.pagination.currentPage = 1;
            this.fetchItems();
          }
          this.formModal.dismiss();
          this.form.reset();
        },
        onError: (error) => this.backendErrors = this.errorService.errors
      });
    } catch (error) {
      console.error('Error creating record:', error);
    }
  }

  private async updateItem(data: any) {
    try {
      // New method to get all editable fields
      const getAllEditableFields = (data: any) => {
        const editableFields = {
          id: data.id,
<% fieldsWithTypes
    .filter(f => !['id', 'created_at', 'updated_at'].includes(f.name))
    .forEach(function(field) { %>
          <%- h.toCamelCase(field.name) %>: data.<%- h.toCamelCase(field.name) %>,
<% }); %>
<% if (relationships && relationships.length > 0) { 
  relationships.forEach(function(rel) { 
    const relationshipName = h.toCamelCase(rel.name);
    const relationshipIdName = h.toCamelCase(rel.name + 'Id');
%>
          <%- relationshipIdName %>: data.<%- relationshipName %>?.id || data.<%- relationshipIdName %>,
<% }); } %>
        };
        return editableFields;
      };

      const result = await this.executeMutation<MutationResponse>({
        mutation: Update<%= h.capitalize(modelName) %>Mutation,
        variables: { input: getAllEditableFields(data) },
        responsePath: 'update<%= h.capitalize(modelName) %>',
        successMessage: 'Record updated successfully!',
        errorMessage: 'Update failed. Please check the errors and try again.',
        onSuccess: (response) => {
          if (response?.data) {
            const index = this.items.findIndex(item => item.id === data.id);
            if (index !== -1) {
              this.items[index] = response.data;
              if (this.sortField) {
                this.items = this.sortItems(this.items);
              }
            }
          }
          this.formModal.dismiss();
          this.form.reset();
          this.isEditing = false;
          this.currentItem = null;
        },
        onError: (error) => this.backendErrors = this.errorService.errors
      });
    } catch (error) {
      console.error('Error updating record:', error);
    }
  }

  get recordControls() {
    return this.form.controls;
  }

  getRecordErrorMessage(control: string): string {
    if (!this.isEditing) return '';

    const formControl = this.recordControls[control];
    if (!formControl || !formControl.errors) return '';

    if (formControl.errors['required']) return `${control} is required`;

    return '';
  }

  onSort(column: TableColumn) {
    if (!column.sortable) return;

    if (this.sortField === column.field) {
      this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
    } else {
      this.sortField = column.field;
      this.sortDirection = 'asc';
    }

    this.items = this.sortItems(this.items);
  }

  sortItems(items: any[]) {
    return [...items].sort((a, b) => {
      const aValue = a[this.sortField];
      const bValue = b[this.sortField];
      const direction = this.sortDirection === 'asc' ? 1 : -1;
      
      if (aValue < bValue) return -1 * direction;
      if (aValue > bValue) return 1 * direction;
      return 0;
    });
  }

  async doRefresh(event: any) {
    await this.fetchItems();
    event.target.complete();
  }

  async deleteItem(item: TableItem) {
    const alert = await this.alertController.create({
      header: 'Confirm Delete',
      message: `Are you sure you want to delete this Record?`,
      buttons: [
        {
          text: 'Cancel',
          role: 'cancel',
        },
        {
          text: 'Delete',
          role: 'destructive',
          handler: async () => {
            try {
              const result = await this.executeMutation<MutationResponse>({
                mutation: Delete<%= h.capitalize(modelName) %>Mutation,
                variables: { input: { id: item.id } },
                responsePath: 'delete<%= h.capitalize(modelName) %>',
                successMessage: 'Record deleted successfully!',
                errorMessage: 'Delete failed. Please try again.',
                onSuccess: (response) => {
                  const index = this.items.findIndex(i => i.id === item.id);
                  if (index !== -1) {
                    this.items.splice(index, 1);
                  }
                },
                onError: (error) => this.backendErrors = this.errorService.errors
              });
            } catch (error) {
              console.error('Error deleting item:', error);
            }
          },
        },
      ],
    });

    await alert.present();
  }

  async changePage(page: number) {
    if (page >= 1 && page <= this.pagination.totalPages) {
      this.pagination.currentPage = page;
      await this.fetchItems();
    }
  }

  async nextPage() {
    if (this.pagination.currentPage < this.pagination.totalPages) {
      await this.changePage(this.pagination.currentPage + 1);
    }
  }

  async previousPage() {
    if (this.pagination.currentPage > 1) {
      await this.changePage(this.pagination.currentPage - 1);
    }
  }

  get canGoNext(): boolean {
    return this.pagination.currentPage < this.pagination.totalPages;
  }

  get canGoPrevious(): boolean {
    return this.pagination.currentPage > 1;
  }

  get totalPages(): number {
    return this.pagination.totalPages;
  }

  get currentPage(): number {
    return this.pagination.currentPage;
  }

<% if (relationships && relationships.length > 0) { 
  relationships.forEach(function(rel) { %>
  on<%= h.capitalize(rel.name) %>Change(event: any) {
    // Handle <%= rel.name.toLowerCase() %> selection change if needed
    console.log('<%= rel.name %> changed:', event.detail.value);
  }
<% }); } %>
}
