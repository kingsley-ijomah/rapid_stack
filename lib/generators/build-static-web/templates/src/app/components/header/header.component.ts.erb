import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, Router, NavigationEnd } from '@angular/router';
import { AuthService } from '../../services/auth.service';
import { filter } from 'rxjs/operators';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [CommonModule, RouterModule],
  template: `
    <header class="header">
      <div class="header-left">
        <a [routerLink]="['/dashboard']" class="apps-link">
          <i class="fas fa-th-large"></i>
          <span class="link-text">Apps</span>
        </a>
        <h1>{{ pageTitle }}</h1>
      </div>
      <button class="mobile-menu-btn" (click)="toggleMobileMenu()" [class.active]="isMobileMenuOpen">
        <i class="fas" [class.fa-bars]="!isMobileMenuOpen" [class.fa-times]="isMobileMenuOpen"></i>
      </button>
      <div class="header-right" [class.mobile-open]="isMobileMenuOpen">
        <button class="sign-out-btn" (click)="signOut()">
          <i class="fas fa-sign-out-alt"></i>
          <span class="link-text">Sign Out</span>
        </button>
      </div>
    </header>
  `,
  styles: [`
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1rem;
      background-color: white;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      position: sticky;
      top: 0;
      z-index: 100;

      h1 {
        margin: 0;
        color: #1f2937;
        font-size: 1.25rem;
        font-weight: 600;
      }
    }

    .header-left {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .header-right {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .apps-link, .settings-link {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 1rem;
      color: #4b5563;
      text-decoration: none;
      font-size: 0.9rem;
      border-radius: 0.375rem;
      transition: all 0.2s;

      i {
        font-size: 1rem;
      }

      &:hover {
        background-color: #f3f4f6;
        color: #1f2937;
      }
    }

    .sign-out-btn {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem 1rem;
      background-color: #fee2e2;
      color: #991b1b;
      border: none;
      border-radius: 0.375rem;
      cursor: pointer;
      font-size: 0.9rem;
      transition: all 0.2s;

      i {
        font-size: 1rem;
      }

      &:hover {
        background-color: #fecaca;
        color: #7f1d1d;
      }
    }

    .mobile-menu-btn {
      display: none;
      background: none;
      border: none;
      padding: 0.5rem;
      color: #4b5563;
      cursor: pointer;
      font-size: 1.25rem;
      transition: color 0.2s;

      &:hover {
        color: #1f2937;
      }

      &.active {
        color: #1f2937;
      }
    }

    @media (max-width: 768px) {
      .header {
        padding: 0.75rem 1rem;
      }

      .mobile-menu-btn {
        display: block;
      }

      .header-right {
        position: fixed;
        top: 60px;
        left: 0;
        right: 0;
        background-color: white;
        padding: 1rem;
        flex-direction: column;
        align-items: stretch;
        gap: 0.5rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        transform: translateY(-100%);
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;

        &.mobile-open {
          transform: translateY(0);
          opacity: 1;
          visibility: visible;
        }

        .settings-link, .sign-out-btn {
          width: 100%;
          justify-content: center;
          padding: 0.75rem 1rem;
          display: flex;
          align-items: center;
          gap: 0.5rem;

          i {
            margin: 0;
            width: 1rem;
            text-align: center;
          }
        }
      }

      .header-left {
        h1 {
          font-size: 1.125rem;
        }

        .link-text {
          display: none;
        }

        .apps-link {
          padding: 0.5rem;
          justify-content: center;
        }
      }

      .link-text {
        display: inline-block;
        font-size: 0.9rem;
      }

      .apps-link {
        i {
          margin-right: 0.5rem;
        }
      }
    }
  `]
})
export class HeaderComponent implements OnInit {
  pageTitle: string = '';
  isMobileMenuOpen: boolean = false;

  constructor(
    private AuthService: AuthService,
    private router: Router
  ) {}

  ngOnInit() {
    this.router.events.pipe(
      filter(event => event instanceof NavigationEnd)
    ).subscribe(() => {
      this.updatePageTitle();
      this.closeMobileMenu();
    });
    
    // Set initial page title
    this.updatePageTitle();
  }

  toggleMobileMenu() {
    this.isMobileMenuOpen = !this.isMobileMenuOpen;
  }

  closeMobileMenu() {
    this.isMobileMenuOpen = false;
  }

  private updatePageTitle() {
    const url = this.router.url;
    
    // Remove leading slash and split into segments
    const segments = url.substring(1).split('/');
    
    // Map route segments to readable titles
    const titleMap: { [key: string]: string } = {
      'dashboard': 'Dashboard',
      'login': 'Login',
      'signup': 'Sign Up',
      'forgot-password': 'Forgot Password',
      'reset-password': 'Reset Password'
    };

    // Get the last segment of the URL
    const lastSegment = segments[segments.length - 1];
    
    // If we have a specific title for this route, use it
    if (titleMap[lastSegment]) {
      this.pageTitle = titleMap[lastSegment];
    } else {
      // Otherwise, use the first segment or default to 'Dashboard'
      this.pageTitle = titleMap[segments[0]] || 'Dashboard';
    }
  }

  async signOut() {
    try {
      const { error } = await this.AuthService.signOut();
      if (error) {
        console.error('Sign out error:', error);
        return;
      }
      this.router.navigate(['/login']);
    } catch (error) {
      console.error('Unexpected error during sign out:', error);
    }
  }
} 