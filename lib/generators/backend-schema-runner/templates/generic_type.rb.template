# frozen_string_literal: true

module Types
  # GraphQL type for <%= modelName %>
  class <%= modelName %>Type < Types::BaseObject
    field :id, ID, null: false
<% fields.forEach(function(field) { -%>
<% if (field.name.endsWith('_id') || field.name.endsWith('_type')) { 
  // Skip fields ending with _id or _type as they're managed by relationships
  return;
} -%>
    field :<%= field.name %>, <%= field.type === 'String' ? 'String' : 
                               field.type === 'Integer' ? 'Integer' :
                               field.type === 'Float' ? 'Float' :
                               field.type === 'Boolean' ? 'Boolean' :
                               field.type === 'Time' || field.type === 'DateTime' ? 'GraphQL::Types::ISO8601DateTime' :
                               field.type === 'Date' ? 'GraphQL::Types::ISO8601Date' :
                               field.type === 'Enum' ? `Types::${modelName}${field.name.charAt(0).toUpperCase() + field.name.slice(1)}EnumType` :
                               'String' %>, null: <%= field.required ? 'false' : 'true' %>
<% }); -%>
    field :created_at, GraphQL::Types::ISO8601DateTime, null: false
    field :updated_at, GraphQL::Types::ISO8601DateTime, null: false

<% if (relationships && relationships.length > 0) { -%>
    # Relationships
<% 
  // Group relationships by type for better organization
  const belongsTo = relationships.filter(rel => rel.type === 'belongs_to');
  const hasMany = relationships.filter(rel => rel.type === 'has_many');
  const hasOne = relationships.filter(rel => rel.type === 'has_one');
  const other = relationships.filter(rel => !['belongs_to', 'has_many', 'has_one'].includes(rel.type));
  
  // Create a Set to track relationship fields and prevent duplicates
  const addedRelationships = new Set();
  
  // Output belongs_to relationships
  belongsTo.forEach(function(rel) { 
    // Use the model snake_case name for proper naming
    const relatedModelName = rel.modelSnakeCase || rel.model.toLowerCase();
    
    // Check if this relationship has already been added
    const relationshipKey = `${rel.type}:${relatedModelName}`;
    if (addedRelationships.has(relationshipKey)) {
      return; // Skip duplicate relationship
    }
    addedRelationships.add(relationshipKey);
    
    if (rel.polymorphic) {
-%>
    field :<%= relatedModelName %>_type, String, null: true # polymorphic type
    field :<%= relatedModelName %>_id, ID, null: true # polymorphic id
<% } else { -%>
    field :<%= relatedModelName %>, Types::<%= rel.model %>Type, null: true # belongs_to
<% } -%>
<% }); -%>
<% 
  // Output has_many relationships
  hasMany.forEach(function(rel) { 
    // Use the pluralized model name from the relationship
    const pluralizedName = rel.pluralizedModel || utils.pluralize(rel.modelSnakeCase || rel.model.toLowerCase());
    
    // Check if this relationship has already been added
    const relationshipKey = `${rel.type}:${pluralizedName}`;
    if (addedRelationships.has(relationshipKey)) {
      return; // Skip duplicate relationship
    }
    addedRelationships.add(relationshipKey);
    
    if (rel.polymorphic) {
-%>
    field :<%= pluralizedName %>, [Types::<%= rel.model %>Type], null: false # has_many as:<%= rel.as %>
<% } else { -%>
    field :<%= pluralizedName %>, [Types::<%= rel.model %>Type], null: false # has_many<% if (rel.dependent) { %> (dependent: :<%= rel.dependent %>)<% } %>
<% } -%>
<% }); -%>
<% 
  // Output has_one relationships
  hasOne.forEach(function(rel) { 
    // Use the model snake_case name for proper naming
    const relatedModelName = rel.modelSnakeCase || rel.model.toLowerCase();
    
    // Check if this relationship has already been added
    const relationshipKey = `${rel.type}:${relatedModelName}`;
    if (addedRelationships.has(relationshipKey)) {
      return; // Skip duplicate relationship
    }
    addedRelationships.add(relationshipKey);
    
    if (rel.polymorphic) {
-%>
    field :<%= relatedModelName %>, Types::<%= rel.model %>Type, null: true # has_one as:<%= rel.as %>
<% } else { -%>
    field :<%= relatedModelName %>, Types::<%= rel.model %>Type, null: true # has_one<% if (rel.dependent) { %> (dependent: :<%= rel.dependent %>)<% } %>
<% } -%>
<% }); -%>
<% 
  // Output other relationship types
  other.forEach(function(rel) { 
    if (rel.type.includes('many')) {
      // Use the pluralized model name from the relationship
      const pluralizedName = rel.pluralizedModel || utils.pluralize(rel.modelSnakeCase || rel.model.toLowerCase());
      
      // Check if this relationship has already been added
      const relationshipKey = `${rel.type}:${pluralizedName}`;
      if (addedRelationships.has(relationshipKey)) {
        return; // Skip duplicate relationship
      }
      addedRelationships.add(relationshipKey);
      
      if (rel.polymorphic) {
-%>
    field :<%= pluralizedName %>, [Types::<%= rel.model %>Type], null: false # <%= rel.type %> as:<%= rel.as %>
<%    } else { -%>
    field :<%= pluralizedName %>, [Types::<%= rel.model %>Type], null: false # <%= rel.type %><% if (rel.dependent) { %> (dependent: :<%= rel.dependent %>)<% } %>
<%    } -%>
<%  } else { 
      // Use the model snake_case name for proper naming
      const relatedModelName = rel.modelSnakeCase || rel.model.toLowerCase();
      
      // Check if this relationship has already been added
      const relationshipKey = `${rel.type}:${relatedModelName}`;
      if (addedRelationships.has(relationshipKey)) {
        return; // Skip duplicate relationship
      }
      addedRelationships.add(relationshipKey);
      
      if (rel.polymorphic) {
-%>
    field :<%= relatedModelName %>, Types::<%= rel.model %>Type, null: true # <%= rel.type %> as:<%= rel.as %>
<%    } else { -%>
    field :<%= relatedModelName %>, Types::<%= rel.model %>Type, null: true # <%= rel.type %><% if (rel.dependent) { %> (dependent: :<%= rel.dependent %>)<% } %>
<%    } -%>
<%  } -%>
<% }); -%>
<% } -%>
  end
end 