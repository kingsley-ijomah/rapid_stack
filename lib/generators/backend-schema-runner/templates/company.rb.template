# frozen_string_literal: true

# Company model class
class Company
  include Mongoid::Document
  include Mongoid::Timestamps

  # Fields
<% 
// Find polymorphic fields
const polymorphicIdFields = fields.filter(field => field.is_polymorphic_id);
const polymorphicTypeFields = fields.filter(field => field.is_polymorphic_type);

// Process regular fields
fields.forEach(function(field, index) { 
  // Skip polymorphic fields as they'll be handled separately
  if (field.is_polymorphic_id || field.is_polymorphic_type) {
    return;
  }
  
  if (field.name.endsWith('_id')) { 
    // Skip fields ending with _id as they're managed by relationships
    return;
  } 
-%>  field :<%= field.name %>, type: <%= field.type %><% if (field.default !== undefined) { %>, default: <%= field.default %><% } %>
<% }); -%>

<% 
// Process polymorphic fields
if (polymorphicIdFields.length > 0 || polymorphicTypeFields.length > 0) { 
-%>
  # Polymorphic fields
<% 
  // Process polymorphic ID fields
  polymorphicIdFields.forEach(function(field) { 
-%>  field :<%= field.name %>, type: BSON::ObjectId<% if (field.required) { %>, required: <%= field.required %><% } %>
<% }); -%>
<% 
  // Process polymorphic Type fields
  polymorphicTypeFields.forEach(function(field) { 
-%>  field :<%= field.name %>, type: String<% if (field.required) { %>, required: <%= field.required %><% } %>
<% }); -%>
<% } -%>

<% 
// Collect all enum fields
const enumFields = fields.filter(field => (field.type === 'Enum' || (field.enum_values && field.enum_values.length > 0)) && !field.name.endsWith('_id'));
if (enumFields.length > 0) { 
-%>
  # Define enums
  ENUMS = {
<% enumFields.forEach(function(field, index) { -%>    <%= field.name %>: {
      values: [<%= field.enum_values ? field.enum_values.map(v => v.replace(/['"]/g, '')).map(v => `'${v}'`).join(', ') : "'default'" %>]
    }<%= index < enumFields.length - 1 ? ',' : '' %>
<% }); -%>
  }.freeze
<% } -%>

<% if (relationships && relationships.length > 0) { -%>
  # Relationships
<% 
  // Group relationships by type for better organization
  const belongsTo = relationships.filter(rel => rel.type === 'belongs_to');
  const hasMany = relationships.filter(rel => rel.type === 'has_many');
  const hasOne = relationships.filter(rel => rel.type === 'has_one');
  const other = relationships.filter(rel => !['belongs_to', 'has_many', 'has_one'].includes(rel.type));
  
  // Create a Set to track relationship names and prevent duplicates
  const addedRelationships = new Set();
  
  // Output belongs_to relationships first
  belongsTo.forEach(function(rel) { 
    // Use the model snake_case name for proper naming
    const modelName = rel.modelSnakeCase || rel.model.toLowerCase();
    
    // Check if this relationship has already been added
    const relationshipKey = `${rel.type}:${modelName}`;
    if (addedRelationships.has(relationshipKey)) {
      return; // Skip duplicate relationship
    }
    addedRelationships.add(relationshipKey);
    
    if (rel.polymorphic) {
-%>  <%= rel.type %> :<%= modelName %>, polymorphic: true
<% } else { -%>  <%= rel.type %> :<%= modelName %><% if (rel.foreign_key) { %>, foreign_key: '<%= rel.foreign_key %>'<% } %>
<% } -%>
<% }); -%>
<% 
  // Output has_many relationships
  hasMany.forEach(function(rel) { 
    // Use the pluralized model name from the relationship
    const pluralizedName = rel.pluralizedModel || utils.pluralize(rel.modelSnakeCase || rel.model.toLowerCase());
    
    // Check if this relationship has already been added
    const relationshipKey = `${rel.type}:${pluralizedName}`;
    if (addedRelationships.has(relationshipKey)) {
      return; // Skip duplicate relationship
    }
    addedRelationships.add(relationshipKey);
    
    if (rel.polymorphic) {
-%>  <%= rel.type %> :<%= pluralizedName %>, as: :<%= rel.as %>
<% } else { -%>  <%= rel.type %> :<%= pluralizedName %><% if (rel.foreign_key) { %>, foreign_key: '<%= rel.foreign_key %>'<% } %><% if (rel.dependent) { %>, dependent: :<%= rel.dependent %><% } %>
<% } -%>
<% }); -%>
<% 
  // Output has_one relationships
  hasOne.forEach(function(rel) { 
    // Use the model snake_case name for proper naming
    const modelName = rel.modelSnakeCase || rel.model.toLowerCase();
    
    // Check if this relationship has already been added
    const relationshipKey = `${rel.type}:${modelName}`;
    if (addedRelationships.has(relationshipKey)) {
      return; // Skip duplicate relationship
    }
    addedRelationships.add(relationshipKey);
    
    if (rel.polymorphic) {
-%>  <%= rel.type %> :<%= modelName %>, as: :<%= rel.as %>
<% } else { -%>  <%= rel.type %> :<%= modelName %><% if (rel.foreign_key) { %>, foreign_key: '<%= rel.foreign_key %>'<% } %><% if (rel.dependent) { %>, dependent: :<%= rel.dependent %><% } %>
<% } -%>
<% }); -%>
<% 
  // Output other relationship types
  other.forEach(function(rel) { 
    if (rel.type.includes('many')) {
      // Use the pluralized model name from the relationship
      const pluralizedName = rel.pluralizedModel || utils.pluralize(rel.modelSnakeCase || rel.model.toLowerCase());
      
      // Check if this relationship has already been added
      const relationshipKey = `${rel.type}:${pluralizedName}`;
      if (addedRelationships.has(relationshipKey)) {
        return; // Skip duplicate relationship
      }
      addedRelationships.add(relationshipKey);
      
      if (rel.polymorphic) {
-%>  <%= rel.type %> :<%= pluralizedName %>, as: :<%= rel.as %>
<%    } else { -%>  <%= rel.type %> :<%= pluralizedName %><% if (rel.foreign_key) { %>, foreign_key: '<%= rel.foreign_key %>'<% } %><% if (rel.dependent) { %>, dependent: :<%= rel.dependent %><% } %>
<%    } -%>
<%  } else { 
      // Use the model snake_case name for proper naming
      const modelName = rel.modelSnakeCase || rel.model.toLowerCase();
      
      // Check if this relationship has already been added
      const relationshipKey = `${rel.type}:${modelName}`;
      if (addedRelationships.has(relationshipKey)) {
        return; // Skip duplicate relationship
      }
      addedRelationships.add(relationshipKey);
      
      if (rel.polymorphic) {
-%>  <%= rel.type %> :<%= modelName %>, as: :<%= rel.as %>
<%    } else { -%>  <%= rel.type %> :<%= modelName %><% if (rel.foreign_key) { %>, foreign_key: '<%= rel.foreign_key %>'<% } %><% if (rel.dependent) { %>, dependent: :<%= rel.dependent %><% } %>
<%    } -%>
<%  } -%>
<% }); -%>
<% } -%>

  # Validations
<% fields.forEach(function(field) { -%>
<% if (field.name.endsWith('_id') || field.name.endsWith('_type') || field.name === 'code') {
  // Skip relationship fields and code field
  return;
} -%>
<% if (field.validations) { -%>
<% if (field.validationStatements) { -%>
<% field.validationStatements.forEach(statement => { -%>  <%- statement %>
<% }); -%>
<% } -%>
<% } -%>
<% }); -%>

  # Callbacks
  before_create :generate_company_code

  # Generate a unique company code
  def generate_company_code
    return if code.present?

    # Generate a code based on the company name
    letters = generate_letters_from_name
    numbers = generate_random_numbers
    self.code = "#{letters}#{numbers}"
  end

  private

  # Generate letters from the company name
  def generate_letters_from_name
    words = name.split
    if words.length >= 2
      # Use first letter of first two words
      "#{words[0][0]}#{words[1][0]}".upcase
    else
      # Use first two letters of the name
      name[0..1].upcase
    end
  end

  # Generate random numbers for the company code
  def generate_random_numbers
    # Generate a 4-digit random number
    rand(1000..9999).to_s
  end
end 