import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { RouterLink, ActivatedRoute } from '@angular/router';
import { CreateUserMutation } from 'src/app/graphql/mutations/auth/createUser.mutation';
import { Router } from '@angular/router';
import { BaseGraphQLPage } from 'src/app/shared/base/base-graphql.page';
import {
  IonHeader,
  IonToolbar,
  IonTitle,
  IonContent,
  IonButton,
  IonInput,
  IonCheckbox,
  IonItem,
  IonLabel,
  IonText,
  IonButtons,
  IonBackButton,
} from '@ionic/angular/standalone';

@Component({
  selector: 'app-signup',
  templateUrl: './signup.page.html',
  styleUrls: ['./signup.page.scss'],
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterLink,
    IonHeader,
    IonToolbar,
    IonTitle,
    IonContent,
    IonButton,
    IonInput,
    IonCheckbox,
    IonItem,
    IonLabel,
    IonText,
    IonButtons,
    IonBackButton
  ]
})
export class SignupPage extends BaseGraphQLPage implements OnInit {
  signupForm: FormGroup;
  isSubmitted = false;
  backendErrors: string[] = [];

  constructor(
    private formBuilder: FormBuilder,
    private router: Router,
    private route: ActivatedRoute
  ) {
    super();
    this.signupForm = this.formBuilder.group({
      <% args.filter(arg => 
        arg.name !== 'encrypted_password' && 
        arg.name !== 'role' &&
        arg.name !== 'reset_password_token' &&
        arg.name !== 'reset_password_sent_at' &&
        arg.name !== 'reset_password_token_expires_at'
      ).forEach(function(arg) { %>
      <%- snakeToCamel(arg.name) %>: [<%- arg.type === 'Boolean' ? false : '\'\'' %>, [<%- arg.required ? 'Validators.required' : '' %><%- arg.type === 'String' ? ', Validators.minLength(3)' : '' %><%- arg.type === 'Boolean' ? ', Validators.pattern(/^(true|false)$/)' : '' %><%- arg.name === 'accept_terms' ? ', Validators.requiredTrue' : '' %>]],
      <% }); %>
    }, {
      validators: this.passwordMatchValidator
    });
  }

  ngOnInit() {
    // Get company code from query params
    this.route.queryParams.subscribe(params => {
      const companyCode = params['companyCode'];
      if (companyCode) {
        const companyCodeControl = this.signupForm.get('companyCode');
        companyCodeControl?.setValue(companyCode);
        companyCodeControl?.disable();
      }
    });
  }

  // Custom validator for password match
  private passwordMatchValidator(form: FormGroup) {
    const password = form.get('password');
    const passwordConfirmation = form.get('passwordConfirmation');

    if (password && passwordConfirmation && password.value !== passwordConfirmation.value) {
      passwordConfirmation.setErrors({ passwordMismatch: true });
    } else {
      passwordConfirmation?.setErrors(null);
    }
  }

  // Getter for easy access to form fields in the template
  get f() {
    return this.signupForm.controls;
  }

  async onSubmit() {
    this.isSubmitted = true;
    this.backendErrors = [];

    if (this.signupForm.valid) {
      // Get both enabled and disabled form values
      const signupData = {
        ...this.signupForm.value,
        companyCode: this.signupForm.get('companyCode')?.value
      };
      
      this.executeMutation({
        mutation: CreateUserMutation,
        variables: {
          <% args.filter(arg => 
            arg.name !== 'encrypted_password' && 
            arg.name !== 'role' &&
            arg.name !== 'reset_password_token' &&
            arg.name !== 'reset_password_sent_at' &&
            arg.name !== 'reset_password_token_expires_at'
          ).forEach(function(arg) { %>
          <%= snakeToCamel(arg.name) %>: signupData.<%= snakeToCamel(arg.name) %>,
          <% }); %>
        },
        responsePath: 'createUser',
        successMessage: 'Sign up successful!',
        errorMessage: 'Sign up failed. Please check the errors and try again.',
        onSuccess: () => this.router.navigate(['/auth/login']),
        onError: (error) => this.backendErrors = this.errorService.errors
      });
    }
  }

  // Helper method to get error message
  getErrorMessage(control: string): string {
    if (!this.isSubmitted) return '';

    const formControl = this.f[control];
    if (!formControl || !formControl.errors) return '';

    if (formControl.errors['required']) return `${control} is required`;
    if (formControl.errors['email']) return 'Please enter a valid email';
    if (formControl.errors['minlength']) {
      const minLength = formControl.errors['minlength'].requiredLength;
      return `${control} must be at least ${minLength} characters`;
    }
    if (formControl.errors['pattern']) {
      if (control === 'password') return 'Please include a number and a special character';
      if (control === 'telephone') return 'Please enter a valid phone number';
      if (formControl.errors['pattern'].requiredPattern === '/^(true|false)$/') return 'Must be a valid boolean value';
      return 'Invalid format';
    }
    if (formControl.errors['passwordMismatch']) return 'Passwords do not match';
    if (formControl.errors['requiredTrue']) return 'You must accept the terms and conditions';

    return '';
  }
}

<%
function snakeToCamel(str) {
  return str.replace(/_([a-z])/g, function(match, group1) {
    return group1.toUpperCase();
  });
}
%>
