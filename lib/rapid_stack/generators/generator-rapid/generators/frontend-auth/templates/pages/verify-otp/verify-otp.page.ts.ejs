import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { RouterLink } from '@angular/router';
import { PasswordResetMutation } from 'src/app/graphql/mutations/auth/passwordReset.mutation';
import { ActivatedRoute, Router } from '@angular/router';
import { BaseGraphQLPage } from 'src/app/shared/base/base-graphql.page';
import {
  IonHeader,
  IonToolbar,
  IonTitle,
  IonContent,
  IonButton,
  IonInput,
  IonItem,
  IonLabel,
  IonText,
  IonButtons,
  IonBackButton,
} from '@ionic/angular/standalone';

@Component({
  selector: 'app-verify-otp',
  templateUrl: './verify-otp.page.html',
  styleUrls: ['./verify-otp.page.scss'],
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterLink,
    IonHeader,
    IonToolbar,
    IonTitle,
    IonContent,
    IonButton,
    IonInput,
    IonItem,
    IonLabel,
    IonText,
    IonButtons,
    IonBackButton
  ]
})
export class VerifyOtpPage extends BaseGraphQLPage implements OnInit {
  verifyOtpForm: FormGroup;
  isSubmitted = false;
  backendErrors: string[] = [];
  email: string = '';

  constructor(
    private formBuilder: FormBuilder,
    private router: Router,
    private route: ActivatedRoute
  ) {
    super();
    this.verifyOtpForm = this.formBuilder.group({
      otpCode: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(5)]],
      newPassword: ['', [
        Validators.required, 
        Validators.minLength(6),
        Validators.pattern(/^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,}$/)
      ]],
      confirmNewPassword: ['', [Validators.required]]
    }, {
      validators: this.passwordMatchValidator
    });
  }

  ngOnInit() {
    this.route.queryParams.subscribe(params => {
      if (params['email']) {
        this.email = params['email'];
      }
    });
  }

  // Custom validator for password match
  private passwordMatchValidator(form: FormGroup) {
    const password = form.get('newPassword');
    const confirmPassword = form.get('confirmNewPassword');

    if (password && confirmPassword && password.value !== confirmPassword.value) {
      confirmPassword.setErrors({ passwordMismatch: true });
    } else {
      confirmPassword?.setErrors(null);
    }
  }

  // Getter for easy access to form fields in the template
  get f() {
    return this.verifyOtpForm.controls;
  }

  async onSubmit() {
    this.isSubmitted = true;
    this.backendErrors = [];

    if (this.verifyOtpForm.valid) {
      const formData = this.verifyOtpForm.value;
      
      this.executeMutation({
        mutation: PasswordResetMutation,
        variables: {
          otpCode: formData.otpCode,
          newPassword: formData.newPassword,
          confirmNewPassword: formData.confirmNewPassword
        },
        responsePath: 'passwordReset',
        successMessage: 'Password reset successful!',
        errorMessage: 'Failed to reset password. Please check your OTP code and try again.',
        onSuccess: () => this.router.navigate(['/auth/login']),
        onError: (error) => this.backendErrors = this.errorService.errors
      });
    }
  }

  // Helper method to get error message
  getErrorMessage(control: string): string {
    if (!this.isSubmitted) return '';

    const formControl = this.f[control];
    if (!formControl || !formControl.errors) return '';

    if (formControl.errors['required']) return `${control} is required`;
    if (formControl.errors['minlength']) {
      const minLength = formControl.errors['minlength'].requiredLength;
      return `${control} must be at least ${minLength} characters`;
    }
    if (formControl.errors['maxlength']) {
      const maxLength = formControl.errors['maxlength'].requiredLength;
      return `${control} must be at most ${maxLength} characters`;
    }
    if (formControl.errors['pattern']) {
      if (control === 'newPassword') return 'Password must include a number and a special character';
      return 'Invalid format';
    }
    if (formControl.errors['passwordMismatch']) return 'Passwords do not match';

    return '';
  }
}

<% 
function snakeToCamel(str) {
  return str.replace(/_([a-z])/g, function(match, group1) {
    return group1.toUpperCase();
  });
}
%> 